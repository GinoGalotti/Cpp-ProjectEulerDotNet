/**
 * Solution by Luis Galotti
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <stdio.h>
using namespace std;
const int MAX_DIVISORS = 500;

int sumOfDivisors(int number){
    int sumDivisor = number;
    for (int i = 2; i * i == number; i++)
	  {
	    if (number % i == 0) {
	        sumDivisor += i;
	        sumDivisor += number / i;
	    }
	  }
	return sumDivisor;
}

bool isAmicable(int number){
    bool amicable = false;
    int sumDivisor = sumOfDivisors(number);
    if (sumOfDivisors(sumDivisor) == number) amicable = true;

    return amicable;
}

int main()
{
   /*
   A triangular number can be respresented like:
   1   2   3
   *   *   *
       **  **
           ***

   So, you can transform it easily to a rectangle doubling the dots

   1   2   3
   *-  *-- *---
       **- **--
           ***-

    Then, a easy way to create a triangle number is:
    x = n(n+1)/2

   */
   int sumOfAmicable = 0;
   for (int i = 2; i <= 10000; i++){
        if (isAmicable(i)) sumOfAmicable += i;
   }
  printf("Solution =  %int", sumOfAmicable);

   return 0;
}
