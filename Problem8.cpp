/**
 * Solution by Luis Galotti
 * Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/
 
#include <iostream>

void getDigits (long long number, int length, int array[]){
    int digits[length];
    int i = length;
    bool continuar = true;
    while (continuar){
        length--;
        digits[i] = number % 10;
        number = number / 10;
        if (length == 0) continuar = false;
    }
    array = digits;
}

int maxProduct(int digits[], int length){
    int max = 0;
    for (int i = 0; i < length - 5; i++){
        int aux = digits[i] * digits[i+1] * digits[i+2] * digits[i+3] + digits[i+4];
        if (aux > max) max = aux;
    }
    return max;
}
 
using namespace std;

int main()
{
    int solution = 0;
    int digits[1000];
    int max = 0;
    /*getDigits(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450, 1000, digits);
    max = maxProduct(digits, 1000);*/
    getDigits(73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173795833195285320880551112540, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(12540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(30358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(52584907711670556013604839586446706324415722155397536978179778461740649551492908625693219784686224828397224137565705605749026140797296865241453510047482166, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(82166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(24219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406368991256071760605886, 95, digits);
    max = maxProduct (digits, 95);
    if (max > solution) solution = max;
    getDigits(0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450, 60, digits);
    max = maxProduct (digits, 60);
    if (max > solution) solution = max;
    
    
    
   	printf("Solution =  %i", solution);
   
   return 0;
}
